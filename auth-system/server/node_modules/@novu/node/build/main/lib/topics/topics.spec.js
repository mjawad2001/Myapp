"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var novu_1 = require("../novu");
var axios_1 = __importDefault(require("axios"));
var mockConfig = {
    apiKey: '1234',
};
jest.mock('axios');
describe('Novu Node.js package - Topics class', function () {
    var mockedAxios = axios_1.default;
    var novu;
    var methods = ['get', 'post', 'put', 'delete', 'patch'];
    beforeEach(function () {
        mockedAxios.create.mockReturnThis();
        novu = new novu_1.Novu(mockConfig.apiKey);
    });
    afterEach(function () {
        methods.forEach(function (method) {
            mockedAxios[method].mockClear();
        });
    });
    test('should create topic', function () { return __awaiter(void 0, void 0, void 0, function () {
        var key, name, mockedResponse, result;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    key = 'topic-key';
                    name = 'topic-name';
                    mockedResponse = {
                        data: {
                            _id: 'topic-id',
                        },
                    };
                    mockedAxios.post.mockResolvedValue(mockedResponse);
                    return [4, novu.topics.create({
                            key: key,
                            name: name,
                        })];
                case 1:
                    result = _a.sent();
                    expect(mockedAxios.post).toHaveBeenCalled();
                    expect(mockedAxios.post).toHaveBeenCalledWith('/topics', { key: key, name: name });
                    expect(result).toBe(mockedResponse);
                    return [2];
            }
        });
    }); });
    test('should rename topic', function () { return __awaiter(void 0, void 0, void 0, function () {
        var key, name, topicId, data, mockedResponse, result;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    key = 'topic-key';
                    name = 'topic-renamed';
                    topicId = 'topic-id';
                    data = {
                        _id: 'topic-id',
                        _environmentId: 'environment-id',
                        _organizationId: 'organization-id',
                        key: key,
                        name: name,
                        subscribers: ['subscriber-id-1', 'subscriber-id-2'],
                    };
                    mockedResponse = {
                        data: data,
                    };
                    mockedAxios.patch.mockResolvedValue(mockedResponse);
                    return [4, novu.topics.rename(key, name)];
                case 1:
                    result = _a.sent();
                    expect(mockedAxios.patch).toHaveBeenCalled();
                    expect(mockedAxios.patch).toHaveBeenCalledWith("/topics/".concat(key), {
                        name: name,
                    });
                    expect(result).toBe(mockedResponse);
                    return [2];
            }
        });
    }); });
    test('should delete topic by the key', function () { return __awaiter(void 0, void 0, void 0, function () {
        var key, mockedResponse, result;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    key = 'topic-key';
                    mockedResponse = {};
                    mockedAxios.delete.mockResolvedValue(mockedResponse);
                    return [4, novu.topics.delete(key)];
                case 1:
                    result = _a.sent();
                    expect(mockedAxios.delete).toHaveBeenCalled();
                    expect(mockedAxios.delete).toHaveBeenCalledWith("/topics/".concat(key));
                    expect(result).toStrictEqual(mockedResponse);
                    return [2];
            }
        });
    }); });
    test('should get topic by the key', function () { return __awaiter(void 0, void 0, void 0, function () {
        var key, name, topicId, topic, mockedResponse, result;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    key = 'topic-key';
                    name = 'topic-name';
                    topicId = 'topic-id';
                    topic = {
                        _id: 'topic-id',
                        _environmentId: 'environment-id',
                        _organizationId: 'organization-id',
                        key: key,
                        name: name,
                        subscribers: ['subscriber-id-1', 'subscriber-id-2'],
                    };
                    mockedResponse = {
                        data: __assign({}, topic),
                    };
                    mockedAxios.get.mockResolvedValue(mockedResponse);
                    return [4, novu.topics.get(key)];
                case 1:
                    result = _a.sent();
                    expect(mockedAxios.get).toHaveBeenCalled();
                    expect(mockedAxios.get).toHaveBeenCalledWith("/topics/".concat(key));
                    expect(result).toStrictEqual(mockedResponse);
                    return [2];
            }
        });
    }); });
    test('should get topic subscriber by the external subscriber ID', function () { return __awaiter(void 0, void 0, void 0, function () {
        var topicKey, externalSubscriberId, topicSubscriber, mockedResponse, result;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    topicKey = 'topic-key';
                    externalSubscriberId = 'external-subscriber-id';
                    topicSubscriber = {
                        _id: 'topic-subscriber-id',
                        _environmentId: 'environment-id',
                        _organizationId: 'organization-id',
                        _subscriberId: 'subscriber-id',
                        _topicId: 'topic-id',
                        topicKey: topicKey,
                        externalSubscriberId: externalSubscriberId,
                    };
                    mockedResponse = {
                        data: __assign({}, topicSubscriber),
                    };
                    mockedAxios.get.mockResolvedValue(mockedResponse);
                    return [4, novu.topics.getSubscriber(topicKey, externalSubscriberId)];
                case 1:
                    result = _a.sent();
                    expect(mockedAxios.get).toHaveBeenCalled();
                    expect(mockedAxios.get).toHaveBeenCalledWith("/topics/".concat(topicKey, "/subscribers/").concat(externalSubscriberId));
                    expect(result).toStrictEqual(mockedResponse);
                    return [2];
            }
        });
    }); });
    test('should list topics', function () { return __awaiter(void 0, void 0, void 0, function () {
        var key, name, topicId, mockedResponse, result;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    key = 'topic-key';
                    name = 'topic-name';
                    topicId = 'topic-id';
                    mockedResponse = {
                        data: {
                            totalCount: 1,
                            pageSize: 10,
                            page: 0,
                            data: [
                                {
                                    _id: 'topic-id',
                                    _environmentId: 'environment-id',
                                    _organizationId: 'organization-id',
                                    key: key,
                                    name: name,
                                    subscribers: ['subscriber-id-1', 'subscriber-id-2'],
                                },
                            ],
                        },
                    };
                    mockedAxios.get.mockResolvedValue(mockedResponse);
                    return [4, novu.topics.list({ page: 0 })];
                case 1:
                    result = _a.sent();
                    expect(mockedAxios.get).toHaveBeenCalled();
                    expect(mockedAxios.get).toHaveBeenCalledWith('/topics', {
                        params: { page: 0 },
                    });
                    expect(result).toBe(mockedResponse);
                    return [2];
            }
        });
    }); });
    test('should list topics with selected pageSize', function () { return __awaiter(void 0, void 0, void 0, function () {
        var key, name, topicId, pageSize, mockedResponse, result;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    key = 'topic-key';
                    name = 'topic-name';
                    topicId = 'topic-id';
                    pageSize = 20;
                    mockedResponse = {
                        data: {
                            totalCount: 1,
                            pageSize: pageSize,
                            page: 0,
                            data: [
                                {
                                    _id: 'topic-id',
                                    _environmentId: 'environment-id',
                                    _organizationId: 'organization-id',
                                    key: key,
                                    name: name,
                                    subscribers: ['subscriber-id-1', 'subscriber-id-2'],
                                },
                            ],
                        },
                    };
                    mockedAxios.get.mockResolvedValue(mockedResponse);
                    return [4, novu.topics.list({ page: 0, pageSize: pageSize })];
                case 1:
                    result = _a.sent();
                    expect(mockedAxios.get).toHaveBeenCalled();
                    expect(mockedAxios.get).toHaveBeenCalledWith('/topics', {
                        params: { page: 0, pageSize: pageSize },
                    });
                    expect(result).toBe(mockedResponse);
                    return [2];
            }
        });
    }); });
    test('should add subscribers', function () { return __awaiter(void 0, void 0, void 0, function () {
        var topicId, subscribers, mockedResponse, result;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    topicId = 'topic-id';
                    subscribers = ['subscriber-id-1', 'subscriber-id-2'];
                    mockedResponse = {
                        data: {
                            succeeded: subscribers,
                        },
                    };
                    mockedAxios.post.mockResolvedValue(mockedResponse);
                    return [4, novu.topics.addSubscribers(topicId, { subscribers: subscribers })];
                case 1:
                    result = _a.sent();
                    expect(mockedAxios.post).toHaveBeenCalled();
                    expect(mockedAxios.post).toHaveBeenCalledWith("/topics/".concat(topicId, "/subscribers"), { subscribers: subscribers });
                    expect(result).toStrictEqual(mockedResponse);
                    return [2];
            }
        });
    }); });
    test('should remove subscribers', function () { return __awaiter(void 0, void 0, void 0, function () {
        var topicId, subscribers, result;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    topicId = 'topic-id';
                    subscribers = ['subscriber-id-1', 'subscriber-id-2'];
                    mockedAxios.post.mockResolvedValue({});
                    return [4, novu.topics.removeSubscribers(topicId, {
                            subscribers: subscribers,
                        })];
                case 1:
                    result = _a.sent();
                    expect(mockedAxios.post).toHaveBeenCalled();
                    expect(mockedAxios.post).toHaveBeenCalledWith("/topics/".concat(topicId, "/subscribers/removal"), { subscribers: subscribers });
                    expect(result).toStrictEqual({});
                    return [2];
            }
        });
    }); });
});
