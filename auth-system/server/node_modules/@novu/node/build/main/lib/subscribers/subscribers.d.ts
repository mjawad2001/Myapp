import { WithHttp } from '../novu.interface';
import { IGetSubscriberNotificationFeedParams, ISubscriberPayload, ISubscribers, IUpdateSubscriberPreferencePayload } from './subscriber.interface';
interface IChannelCredentials {
    webhookUrl?: string;
    deviceTokens?: string[];
}
export declare class Subscribers extends WithHttp implements ISubscribers {
    list(page: number): Promise<import("axios").AxiosResponse<any, any>>;
    get(subscriberId: string): Promise<import("axios").AxiosResponse<any, any>>;
    identify(subscriberId: string, data: ISubscriberPayload): Promise<import("axios").AxiosResponse<any, any>>;
    update(subscriberId: string, data: ISubscriberPayload): Promise<import("axios").AxiosResponse<any, any>>;
    getPreference(subscriberId: string): Promise<import("axios").AxiosResponse<any, any>>;
    updatePreference(subscriberId: string, templateId: string, data: IUpdateSubscriberPreferencePayload): Promise<import("axios").AxiosResponse<any, any>>;
    setCredentials(subscriberId: string, providerId: string, credentials: IChannelCredentials): Promise<import("axios").AxiosResponse<any, any>>;
    unsetCredentials(subscriberId: string, providerId: string): Promise<import("axios").AxiosResponse<any, any>>;
    delete(subscriberId: string): Promise<import("axios").AxiosResponse<any, any>>;
    getNotificationsFeed(subscriberId: string, params: IGetSubscriberNotificationFeedParams): Promise<import("axios").AxiosResponse<any, any>>;
    getUnseenCount(subscriberId: string, seen: boolean): Promise<import("axios").AxiosResponse<any, any>>;
    markMessageSeen(subscriberId: string, messageId: string): Promise<import("axios").AxiosResponse<any, any>>;
    markMessageActionSeen(subscriberId: string, messageId: string, type: string): Promise<import("axios").AxiosResponse<any, any>>;
}
export {};
//# sourceMappingURL=subscribers.d.ts.map