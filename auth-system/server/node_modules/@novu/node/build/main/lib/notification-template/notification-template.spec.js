"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var novu_1 = require("../novu");
var axios_1 = __importDefault(require("axios"));
var mockConfig = {
    apiKey: '1234',
};
jest.mock('axios');
describe('test use of novus node package - NotificationTemplates class', function () {
    var mockedAxios = axios_1.default;
    var novu;
    beforeEach(function () {
        mockedAxios.create.mockReturnThis();
        novu = new novu_1.Novu(mockConfig.apiKey);
    });
    test('should fetch all the notification-templates correctly', function () { return __awaiter(void 0, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    mockedAxios.post.mockResolvedValue({});
                    return [4, novu.notificationTemplates.getAll()];
                case 1:
                    _a.sent();
                    expect(mockedAxios.get).toHaveBeenCalled();
                    expect(mockedAxios.get).toHaveBeenCalledWith('/notification-templates', {});
                    return [2];
            }
        });
    }); });
    test('should fetch all the notification-templates correctly of 2nd page', function () { return __awaiter(void 0, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    mockedAxios.post.mockResolvedValue({});
                    return [4, novu.notificationTemplates.getAll(2)];
                case 1:
                    _a.sent();
                    expect(mockedAxios.get).toHaveBeenCalled();
                    expect(mockedAxios.get).toHaveBeenCalledWith('/notification-templates', {
                        params: {
                            page: 2,
                        },
                    });
                    return [2];
            }
        });
    }); });
    test('should fetch all the notification-templates correctly with limit of 10', function () { return __awaiter(void 0, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    mockedAxios.post.mockResolvedValue({});
                    return [4, novu.notificationTemplates.getAll(undefined, 10)];
                case 1:
                    _a.sent();
                    expect(mockedAxios.get).toHaveBeenCalled();
                    expect(mockedAxios.get).toHaveBeenCalledWith('/notification-templates', {
                        params: {
                            limit: 10,
                        },
                    });
                    return [2];
            }
        });
    }); });
    test('should fetch all the notification-templates correctly of page 3 with limit of 20', function () { return __awaiter(void 0, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    mockedAxios.post.mockResolvedValue({});
                    return [4, novu.notificationTemplates.getAll(3, 20)];
                case 1:
                    _a.sent();
                    expect(mockedAxios.get).toHaveBeenCalled();
                    expect(mockedAxios.get).toHaveBeenCalledWith('/notification-templates', {
                        params: {
                            page: 3,
                            limit: 20,
                        },
                    });
                    return [2];
            }
        });
    }); });
    test('should create a template with the given parameters', function () { return __awaiter(void 0, void 0, void 0, function () {
        var result;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    mockedAxios.post.mockResolvedValue({});
                    return [4, novu.notificationTemplates.create({
                            name: 'test1',
                            notificationGroupId: '63b99e83598f5625a96c4b97',
                            steps: [],
                        })];
                case 1:
                    result = _a.sent();
                    expect(mockedAxios.post).toHaveBeenCalled();
                    expect(mockedAxios.post).toHaveBeenCalledWith('/notification-templates', {
                        name: 'test1',
                        notificationGroupId: '63b99e83598f5625a96c4b97',
                        steps: [],
                    });
                    return [2];
            }
        });
    }); });
    test('should update the given template', function () { return __awaiter(void 0, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    mockedAxios.post.mockResolvedValue({});
                    return [4, novu.notificationTemplates.update('TEMPLATE_ID', {
                            name: 'exactly like suggested',
                            tags: ['mb', 'mickey'],
                            description: 'new working package',
                            notificationGroupId: 'NOTIFGROUPID',
                            steps: [],
                        })];
                case 1:
                    _a.sent();
                    expect(mockedAxios.put).toHaveBeenCalled();
                    expect(mockedAxios.put).toHaveBeenCalledWith('/notification-templates/TEMPLATE_ID', {
                        name: 'exactly like suggested',
                        tags: ['mb', 'mickey'],
                        description: 'new working package',
                        steps: [],
                        notificationGroupId: 'NOTIFGROUPID',
                    });
                    return [2];
            }
        });
    }); });
    test('should delete the specified template', function () { return __awaiter(void 0, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    mockedAxios.post.mockResolvedValue({});
                    return [4, novu.notificationTemplates.delete('TEMPLATE_I12D')];
                case 1:
                    _a.sent();
                    expect(mockedAxios.delete).toHaveBeenCalled();
                    expect(mockedAxios.delete).toHaveBeenCalledWith('/notification-templates/TEMPLATE_I12D');
                    return [2];
            }
        });
    }); });
    test('should fetch the template with the given templateId', function () { return __awaiter(void 0, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    mockedAxios.post.mockResolvedValue({});
                    return [4, novu.notificationTemplates.getOne('TEMPLATE_ID')];
                case 1:
                    _a.sent();
                    expect(mockedAxios.get).toHaveBeenCalled();
                    expect(mockedAxios.get).toHaveBeenCalledWith('/notification-templates/TEMPLATE_ID');
                    return [2];
            }
        });
    }); });
    test('should update the status of the specified template', function () { return __awaiter(void 0, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    mockedAxios.post.mockResolvedValue({});
                    return [4, novu.notificationTemplates.updateStatus('TEMPLATE_ID', false)];
                case 1:
                    _a.sent();
                    expect(mockedAxios.put).toHaveBeenCalled();
                    expect(mockedAxios.put).toHaveBeenCalledWith('/notification-templates/TEMPLATE_ID/status', {
                        active: false,
                    });
                    return [2];
            }
        });
    }); });
});
