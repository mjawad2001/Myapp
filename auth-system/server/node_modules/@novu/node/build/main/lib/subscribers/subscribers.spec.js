"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var novu_1 = require("../novu");
var axios_1 = __importDefault(require("axios"));
var shared_1 = require("@novu/shared");
var mockConfig = {
    apiKey: '1234',
};
jest.mock('axios');
describe('test use of novus node package - Subscribers class', function () {
    var mockedAxios = axios_1.default;
    var novu;
    var methods = ['get', 'post', 'put', 'delete', 'patch'];
    beforeEach(function () {
        mockedAxios.create.mockReturnThis();
        novu = new novu_1.Novu(mockConfig.apiKey);
    });
    afterEach(function () {
        methods.forEach(function (method) {
            mockedAxios[method].mockClear();
        });
    });
    test('should update subscriber correctly', function () { return __awaiter(void 0, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    mockedAxios.put.mockResolvedValue({});
                    return [4, novu.subscribers.update('test-update-subscriber', {
                            phone: '8989898',
                            locale: 'en',
                            data: { custom1: 'custom value1', custom2: 'custom value2' },
                        })];
                case 1:
                    _a.sent();
                    expect(mockedAxios.put).toHaveBeenCalled();
                    expect(mockedAxios.put).toHaveBeenCalledWith("/subscribers/test-update-subscriber", {
                        phone: '8989898',
                        locale: 'en',
                        data: { custom1: 'custom value1', custom2: 'custom value2' },
                    });
                    return [2];
            }
        });
    }); });
    test('should delete subscriber correctly', function () { return __awaiter(void 0, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    mockedAxios.delete.mockResolvedValue({});
                    return [4, novu.subscribers.delete('test-delete-subscriber')];
                case 1:
                    _a.sent();
                    expect(mockedAxios.delete).toHaveBeenCalled();
                    expect(mockedAxios.delete).toHaveBeenCalledWith("/subscribers/test-delete-subscriber");
                    return [2];
            }
        });
    }); });
    test('should unset subscriber channel credentials correctly', function () { return __awaiter(void 0, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    mockedAxios.put.mockResolvedValue({});
                    return [4, novu.subscribers.unsetCredentials('test-update-subscriber', 'slack')];
                case 1:
                    _a.sent();
                    expect(mockedAxios.put).toHaveBeenCalled();
                    expect(mockedAxios.put).toHaveBeenCalledWith("/subscribers/test-update-subscriber/credentials", {
                        providerId: 'slack',
                        credentials: {
                            webhookUrl: undefined,
                        },
                    });
                    return [2];
            }
        });
    }); });
    test('should identify subscriber correctly', function () { return __awaiter(void 0, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    mockedAxios.post.mockResolvedValue({});
                    return [4, novu.subscribers.identify('test-new-subscriber', {
                            firstName: 'Test',
                            lastName: 'Identify',
                            email: 'email',
                        })];
                case 1:
                    _a.sent();
                    expect(mockedAxios.post).toHaveBeenCalled();
                    expect(mockedAxios.post).toHaveBeenCalledWith('/subscribers', {
                        subscriberId: 'test-new-subscriber',
                        firstName: 'Test',
                        lastName: 'Identify',
                        email: 'email',
                    });
                    return [2];
            }
        });
    }); });
    test('should update subscriber channel credentials correctly', function () { return __awaiter(void 0, void 0, void 0, function () {
        var credentials;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    mockedAxios.put.mockResolvedValue({});
                    credentials = {
                        webhookUrl: 'webhookUrl',
                    };
                    return [4, novu.subscribers.setCredentials('test-update-subscriber', 'slack', credentials)];
                case 1:
                    _a.sent();
                    expect(mockedAxios.put).toHaveBeenCalled();
                    expect(mockedAxios.put).toHaveBeenCalledWith("/subscribers/test-update-subscriber/credentials", {
                        providerId: 'slack',
                        credentials: {
                            webhookUrl: 'webhookUrl',
                        },
                    });
                    return [2];
            }
        });
    }); });
    test('should get subscriber preference', function () { return __awaiter(void 0, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    mockedAxios.get.mockResolvedValue({});
                    return [4, novu.subscribers.getPreference('test-subscriber-preference')];
                case 1:
                    _a.sent();
                    expect(mockedAxios.get).toHaveBeenCalled();
                    expect(mockedAxios.get).toHaveBeenCalledWith('/subscribers/test-subscriber-preference/preferences');
                    return [2];
            }
        });
    }); });
    test('should update subscriber preference', function () { return __awaiter(void 0, void 0, void 0, function () {
        var preferencePayload;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    mockedAxios.patch.mockResolvedValue({});
                    preferencePayload = {
                        channel: {
                            type: shared_1.ChannelTypeEnum.SMS,
                            enabled: true,
                        },
                        enabled: true,
                    };
                    return [4, novu.subscribers.updatePreference('test-preference-subscriber', 'template-123', preferencePayload)];
                case 1:
                    _a.sent();
                    expect(mockedAxios.patch).toHaveBeenCalled();
                    expect(mockedAxios.patch).toHaveBeenCalledWith('/subscribers/test-preference-subscriber/preferences/template-123', preferencePayload);
                    return [2];
            }
        });
    }); });
    test('should get notification feed for subscriber correctly', function () { return __awaiter(void 0, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    mockedAxios.get.mockResolvedValue({});
                    return [4, novu.subscribers.getNotificationsFeed('test-news-feed-subscriber', {})];
                case 1:
                    _a.sent();
                    expect(mockedAxios.get).toHaveBeenCalled();
                    expect(mockedAxios.get).toHaveBeenCalledWith('/subscribers/test-news-feed-subscriber/notifications/feed', { params: {} });
                    return [2];
            }
        });
    }); });
    test('should get notification feed for subscriber with optional feedIdentifier', function () { return __awaiter(void 0, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    mockedAxios.get.mockResolvedValue({});
                    return [4, novu.subscribers.getNotificationsFeed('test-news-feed-subscriber', {
                            feedIdentifier: '123',
                        })];
                case 1:
                    _a.sent();
                    expect(mockedAxios.get).toHaveBeenCalled();
                    expect(mockedAxios.get).toHaveBeenCalledWith('/subscribers/test-news-feed-subscriber/notifications/feed', {
                        params: {
                            feedIdentifier: '123',
                        },
                    });
                    return [2];
            }
        });
    }); });
    test('should get unseen notification count for subscribers feed', function () { return __awaiter(void 0, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    mockedAxios.get.mockResolvedValue({});
                    return [4, novu.subscribers.getUnseenCount('test-unseen-count', false)];
                case 1:
                    _a.sent();
                    expect(mockedAxios.get).toHaveBeenCalled();
                    expect(mockedAxios.get).toHaveBeenCalledWith('/subscribers/test-unseen-count/notifications/unseen', {
                        params: {
                            seen: false,
                        },
                    });
                    return [2];
            }
        });
    }); });
    test('should mark subscriber feed message as seen', function () { return __awaiter(void 0, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    mockedAxios.post.mockResolvedValue({});
                    return [4, novu.subscribers.markMessageSeen('test-message-seen', 'message-123')];
                case 1:
                    _a.sent();
                    expect(mockedAxios.post).toHaveBeenCalled();
                    expect(mockedAxios.post).toHaveBeenCalledWith('/subscribers/test-message-seen/messages/message-123/seen');
                    return [2];
            }
        });
    }); });
    test('should mark message action as seen', function () { return __awaiter(void 0, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    mockedAxios.post.mockResolvedValue({});
                    return [4, novu.subscribers.markMessageActionSeen('test-action-type-sub', 'message-123', 'action-1')];
                case 1:
                    _a.sent();
                    expect(mockedAxios.post).toHaveBeenCalled();
                    expect(mockedAxios.post).toHaveBeenCalledWith('/subscribers/test-action-type-sub/messages/message-123/actions/action-1');
                    return [2];
            }
        });
    }); });
});
