import axios from 'axios';
import { Subscribers } from './subscribers/subscribers';
import { EventEmitter } from 'events';
import { Changes } from './changes/changes';
import { Events } from './events/events';
import { Layouts } from './layouts/layouts';
import { NotificationGroups } from './notification-groups/notification-groups';
import { NotificationTemplates } from './notification-template/notification-template';
import { Environments } from './environments/environments';
import { Feeds } from './feeds/feeds';
import { Topics } from './topics/topics';
import { Integrations } from './integrations/integrations';
import { Messages } from './messages/messages';
export class Novu extends EventEmitter {
    apiKey;
    http;
    subscribers;
    environments;
    events;
    changes;
    layouts;
    notificationGroups;
    notificationTemplates;
    feeds;
    topics;
    integrations;
    messages;
    constructor(apiKey, config) {
        super();
        this.apiKey = apiKey;
        this.http = axios.create({
            baseURL: this.buildBackendUrl(config),
            headers: {
                Authorization: `ApiKey ${this.apiKey}`,
            },
        });
        this.subscribers = new Subscribers(this.http);
        this.environments = new Environments(this.http);
        this.events = new Events(this.http);
        this.trigger = this.events.trigger;
        this.bulkTrigger = this.events.bulkTrigger;
        this.broadcast = this.events.broadcast;
        this.changes = new Changes(this.http);
        this.layouts = new Layouts(this.http);
        this.notificationGroups = new NotificationGroups(this.http);
        this.notificationTemplates = new NotificationTemplates(this.http);
        this.feeds = new Feeds(this.http);
        this.topics = new Topics(this.http);
        this.integrations = new Integrations(this.http);
        this.messages = new Messages(this.http);
    }
    trigger;
    bulkTrigger;
    broadcast;
    buildBackendUrl(config) {
        const novuVersion = 'v1';
        if (!config?.backendUrl) {
            return `https://api.novu.co/${novuVersion}`;
        }
        return config?.backendUrl.includes('novu.co/v')
            ? config?.backendUrl
            : config?.backendUrl + `/${novuVersion}`;
    }
}
